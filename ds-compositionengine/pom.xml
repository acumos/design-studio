<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.acumos.design-studio</groupId>
	<artifactId>ds-compositionengine</artifactId>
	<version>0.0.17-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Design Studio Composition Engine</name>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>1.5.4.RELEASE</version>
		<!-- silence warning about parent relative path -->
		<relativePath />
	</parent>


	<properties>
		<!-- <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding> -->
		<encoding>UTF-8</encoding>
		<!-- Stand-alone RESTFul application -->
		<start-class>org.acumos.designstudio.ce.Application</start-class>
		<!-- Client jar is in Cognita nexus repo -->
		<!-- URL is overridden by Jenkins "CognitaSettings" -->
		<acumos.nexus.url>Set by Jenkins</acumos.nexus.url>
		<acumos.nexus.snapshot.path>Set by Jenkins</acumos.nexus.snapshot.path>
		<acumos.nexus.release.path>Set by Jenkins</acumos.nexus.release.path>
		<!-- EELF jar is in ONAP nexus repo -->
		<onap.nexus.url>https://nexus.onap.org</onap.nexus.url>
		<onap.nexus.snapshot.path>content/repositories/snapshots/</onap.nexus.snapshot.path>
		<onap.nexus.release.path>content/repositories/releases/</onap.nexus.release.path>
		<!-- Jenkins invokes mvn with argument -Dbuild.number=${BUILD_NUMBER} -->
		<build.number>0</build.number>
		<!-- tests require database to be running -->
		<skipTests>true</skipTests> 
		<!-- Docker daemon; overridden by Jenkins CognitaSettings -->
		<docker.host.url>unix:/var/run/docker.sock</docker.host.url>
		<!-- Docker image registry; all overriden by Jenkins CognitaSettings -->
		<docker.registry.url>set by Jenkins "CognitaSettings"</docker.registry.url>
		<docker.registry.login>set by Jenkins "CognitaSettings"</docker.registry.login>
		<docker.registry.password>set by Jenkins "CognitaSettings"</docker.registry.password>
	</properties>


	<repositories>
		<repository>
			<id>acumos-snapshots</id>
			<name>mlp-repository-snapshots</name>
			<url>${acumos.nexus.url}/${acumos.nexus.snapshot.path}</url>
		</repository>
		<repository>
			<id>acumos-releases</id>
			<name>mlp-repository-releases</name>
			<url>${acumos.nexus.url}/${acumos.nexus.release.path}</url>
		</repository>
		<repository>
			<id>ecomp-snapshots</id>
			<name>OpenECOMP - Snapshot Repository</name>
			<url>${onap.nexus.url}/${onap.nexus.snapshot.path}</url>
		</repository>
		<repository>
			<id>ecomp-releases</id>
			<name>OpenECOMP - Release Repository</name>
			<url>${onap.nexus.url}/${onap.nexus.release.path}</url>
		</repository>
	</repositories>
	<dependencies>

		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<!-- Spring chooses <version>${slf4j.version}</version> -->
		</dependency>

		<dependency>
			<groupId>com.att.eelf</groupId>
			<artifactId>eelf-core</artifactId>
			<version>1.0.0</version>
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<!-- Spring chooses <version>${logback.version}</version> -->
		</dependency>

		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<!-- Spring chooses <version>${logback.version}</version> -->
		</dependency>
		<dependency>
			<groupId>com.github.docker-java</groupId>
			<artifactId>docker-java</artifactId>
			<version>3.0.10</version>
		</dependency>

		<dependency>
			<!-- Setup Spring Boot -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>

		<dependency>
			<!-- Setup Spring MVC & REST, use Embedded Tomcat -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.acumos.common-dataservice</groupId>
			<artifactId>cmn-data-svc-client</artifactId>
			<version>1.10.1-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.6.1</version>
		</dependency>

		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.6.1</version>
		</dependency>

		<!-- Test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<!-- Spring sets the <version>4.11</version> -->
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.acumos</groupId>
			<artifactId>acumos-nexus-client</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>

		<dependency>
			<groupId>com.googlecode.json-simple</groupId>
			<artifactId>json-simple</artifactId>
			<!-- <version>1.1.1</version> -->
		</dependency>
		
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
		</dependency>

		<dependency>
			<groupId>com.att.research.cognita.modeling</groupId>
			<artifactId>Modeling-Toolkit-API</artifactId>
			<version>1.0.0-SNAPSHOT</version>
		</dependency>
		<dependency>
		    <groupId>org.everit.json</groupId>
		    <artifactId>org.everit.json.schema</artifactId>
		    <version>1.0.0</version>
       </dependency>

		<dependency>
			<groupId>org.jolokia</groupId>
			<artifactId>jolokia-core</artifactId>
		</dependency>
		
		<dependency>
			<groupId>com.github.docker-java</groupId>
			<artifactId>docker-java</artifactId>
			<version>3.0.10</version>
		</dependency>
	</dependencies>

	<build>
	    
		<!-- <sourceDirectory>src</sourceDirectory> -->
		<!-- <resources> Resource Dir <resource> <directory>resources</directory> 
			</resource> </resources> -->
		<plugins>
		    
		    <plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.14</version>
				<configuration>
					<licenseName>acumos</licenseName>
					<licenseResolver>${project.baseUri}/src/license</licenseResolver>
					<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
					<processStartTag>===============LICENSE_START=======================================================</processStartTag>
					<processEndTag>===============LICENSE_END=========================================================</processEndTag>
					<sectionDelimiter>===================================================================================</sectionDelimiter>
					<inceptionYear>2017</inceptionYear>
					<organizationName><![CDATA[AT&T Intellectual Property & Tech Mahindra. All rights reserved.]]></organizationName>
					<projectName>Acumos</projectName>
					<canUpdateCopyright>true</canUpdateCopyright>
					<canUpdateDescription>true</canUpdateDescription>
					<canUpdateLicense>true</canUpdateLicense>
					<emptyLineAfterHeader>true</emptyLineAfterHeader>
				</configuration>
			</plugin>
			
			<!-- Require Java 1.8 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
				</configuration>
			</plugin>

			<!-- add build information to manifest -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<!-- parent sets version 2.5 -->
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Build-Number>${project.version}.${build.number}</Build-Number>
							<Build-Time>${maven.build.timestamp}</Build-Time>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- Build a single jar with all dependencies -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Skip the deploy-jar-to-nexus step -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<!-- Spring sets the <version>2.8</version> -->
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			
			<plugin>
                <groupId>org.jacoco</groupId>
                <artifactId>jacoco-maven-plugin</artifactId>
                <version>0.7.6.201602180812</version>
                <executions>
                    <execution>
                        <id>default-prepare-agent</id>
                        <goals>
                            <goal>prepare-agent</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>default-report</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>report</goal>
                        </goals>
                    </execution>
                </executions>
             </plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.21.0</version>
				<configuration>
					<verbose>true</verbose>
					<dockerHost>${docker.host.url}</dockerHost>
					<registry>${docker.registry.url}</registry>
					<authConfig>
						<username>${docker.registry.login}</username>
						<password>${docker.registry.password}</password>
					</authConfig>
					<images>
						<image>
							<!-- project-name -->
							<!-- may want to use build number in tag: .${build.number} -->
							<name>ds-compositionengine:${project.version}</name>
							<build>
								<!-- This is the same FROM used in a Dockerfile -->
								<from>openjdk:8-jdk</from>
								<assembly>
									<inline>
										<files>
											<!--  <file>
												<source>application.properties.template</source>
												<outputDirectory />
												<destName>application.properties</destName> 
											</file> -->
											<file>
												<source>lib/gdmservice-0.0.1-SNAPSHOT.jar</source>
												<outputDirectory>lib</outputDirectory>
												<!-- <destName>lib/gdmservice-0.0.1-SNAPSHOT.jar</destName> -->
											</file>
											<file>
												<source>lib/protobuf-java-3.4.0.jar</source>
												<outputDirectory>lib</outputDirectory>
												<!-- <destName>lib/protobuf-java-3.4.0.jar</destName> -->
											</file>
											<file>
												<source>target/${project.artifactId}-${project.version}.${project.packaging}</source>
												<outputDirectory />
											</file>
										</files>
									</inline>
								</assembly>
								<!-- <optimise>true</optimise> -->
								<runCmds>
									<runCmd>
										curl -OL https://github.com/google/protobuf/releases/download/v3.4.0/protoc-3.4.0-linux-x86_64.zip
									</runCmd>
									<runCmd>
										unzip protoc-3.4.0-linux-x86_64.zip -d protoc3
									</runCmd>
									<runCmd>
										sudo mv protoc3/bin/* /usr/local/bin/
									</runCmd>
									<runCmd>
										sudo mv protoc3/include/* /usr/local/include/
									</runCmd>
									<runCmd>
										sudo chown root /usr/local/bin/protoc
									</runCmd>
									<runCmd>
										sudo chown -R root /usr/local/include/google
									</runCmd>
								</runCmds>
								<!-- This is the same CMD used in a Dockerfile -->
								<cmd>
									<shell>cd /maven; java -Djava.security.egd=file:/dev/./urandom -jar ${project.artifactId}-${project.version}.${project.packaging}</shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
			</plugin>
		</plugins>
	</build>

	<distributionManagement>
		<snapshotRepository>
			<!-- must match ID in Jenkins settings -->
			<id>acumos-nexus</id>
			<name>acumos-repository-snapshots</name>
			<url>${acumos.nexus.url}/${acumos.nexus.snapshot.path}</url>
		</snapshotRepository>
		<repository>
			<!-- must match ID in Jenkins settings -->
			<id>acumos-nexus</id>
			<name>acumos-repository-releases</name>
			<url>${acumos.nexus.url}/${acumos.nexus.release.path}</url>
		</repository>
	</distributionManagement>

</project>
