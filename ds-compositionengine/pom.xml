<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<!--
	===============LICENSE_START=======================================================
	Acumos
	===================================================================================
	Copyright (C) 2017 AT&T Intellectual Property & Tech Mahindra. All rights reserved.
	===================================================================================
	This Acumos software file is distributed by AT&T and Tech Mahindra
	under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at
	
	http://www.apache.org/licenses/LICENSE-2.0
	
	This file is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
	===============LICENSE_END=========================================================
	-->
	<modelVersion>4.0.0</modelVersion>

	<groupId>org.acumos.design-studio</groupId>
	<artifactId>ds-compositionengine</artifactId>
	<version>3.0.0-SNAPSHOT</version>
	<packaging>jar</packaging>
	<name>Design Studio Composition Engine</name>

	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>2.1.1.RELEASE</version>
		<!-- silence warning about parent relative path -->
		<relativePath />
	</parent>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
		<!-- Stand-alone RESTFul application -->
		<start-class>org.acumos.designstudio.ce.Application</start-class>
		<!-- Jenkins invokes mvn with argument -Dbuild.number=${BUILD_NUMBER} -->
		<build.number>0</build.number>
		<!-- Not supplied to all jobs; e.g., Javadoc -->
		<docker.pull.registry>nexus3.acumos.org:10001</docker.pull.registry>
		<!-- Supplied by Jenkins -->
		<docker.push.registry>${env.NEXUS3_PUSH_REGISTRY}</docker.push.registry>
		<!-- Protobuf java -->
		<protobuf.java.version>3.9.2</protobuf.java.version>
		<protobuf.java.jar.name>protobuf-java-${protobuf.java.version}.jar</protobuf.java.jar.name>
		<!-- Generic Datamapper Service -->
		<gdmservice.version>1.2.0-SNAPSHOT</gdmservice.version>
		<gdmservice.jar.name>gdmservice-${gdmservice.version}.jar</gdmservice.jar.name>
		<mockito.version>1.10.19</mockito.version>
	</properties>

	<dependencies>
	
		<dependency>
			<groupId>org.acumos.acumos-nexus-client</groupId>
			<artifactId>acumos-nexus-client</artifactId>
			<version>2.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.acumos.common-dataservice</groupId>
			<artifactId>cmn-data-svc-client</artifactId>
			<version>3.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>slf4j-api</artifactId>
			<!-- Spring chooses <version>${slf4j.version}</version> -->
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<!-- Spring chooses <version>${logback.version}</version> -->
		</dependency>
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-core</artifactId>
			<!-- Spring chooses <version>${logback.version}</version> -->
		</dependency>
		<dependency>
			<!-- Setup Spring Boot -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter</artifactId>
		</dependency>
		<dependency>
			<!-- Setup Spring MVC & REST, use Embedded Tomcat -->
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger2</artifactId>
			<version>2.6.1</version>
		</dependency>
		<dependency>
			<groupId>io.springfox</groupId>
			<artifactId>springfox-swagger-ui</artifactId>
			<version>2.6.1</version>
		</dependency>
		<!-- Test dependencies -->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<!-- Spring sets the <version>4.11</version> -->
			<scope>test</scope>
		</dependency>
		<dependency>
			<groupId>com.google.code.gson</groupId>
			<artifactId>gson</artifactId>
			<!-- Spring sets the version -->
		</dependency>
		<dependency>
			<groupId>org.everit.json</groupId>
			<artifactId>org.everit.json.schema</artifactId>
			<version>1.0.0</version>
		</dependency>
		<dependency>
			<groupId>org.jolokia</groupId>
			<artifactId>jolokia-core</artifactId>
		</dependency>
		<dependency>
			<groupId>com.github.docker-java</groupId>
			<artifactId>docker-java</artifactId>
			<version>3.0.10</version>
		</dependency>
		<dependency>
		 	<groupId>com.googlecode.owasp-java-html-sanitizer</groupId>
		 	<artifactId>owasp-java-html-sanitizer</artifactId>
		 	<version>20180219.1</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.powermock/powermock-api-mockito -->
		<dependency>
   			 <groupId>org.powermock</groupId>
    		<artifactId>powermock-api-mockito</artifactId>
   			<version>1.7.4</version>
   			<scope>test</scope>
		</dependency>
		<!-- https://mvnrepository.com/artifact/org.powermock/powermock-module-junit4 -->
		<dependency>
   		 	<groupId>org.powermock</groupId>
    		<artifactId>powermock-module-junit4</artifactId>
   			<version>1.5.1</version>
    		<scope>test</scope>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.powermock/powermock-modules -->
		<dependency>
   		 	<groupId>org.powermock</groupId>
    		<artifactId>powermock-modules</artifactId>
    		<version>1.6.6</version>
    		<type>pom</type>
		</dependency>
		
	</dependencies>
	<build>
		<resources>
			<resource>
				<directory>src/main/resources</directory>
			</resource>
		</resources>
		<plugins>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>license-maven-plugin</artifactId>
				<version>1.17</version>
				<configuration>
					<licenseName>acumos</licenseName>
					<licenseResolver>${project.baseUri}/src/license</licenseResolver>
					<addJavaLicenseAfterPackage>false</addJavaLicenseAfterPackage>
					<processStartTag>===============LICENSE_START=======================================================</processStartTag>
					<processEndTag>===============LICENSE_END=========================================================</processEndTag>
					<sectionDelimiter>===================================================================================</sectionDelimiter>
					<inceptionYear>2017</inceptionYear>
					<organizationName><![CDATA[AT&T Intellectual Property & Tech Mahindra. All rights reserved.]]></organizationName>
					<projectName>Acumos</projectName>
					<canUpdateCopyright>true</canUpdateCopyright>
					<canUpdateDescription>true</canUpdateDescription>
					<canUpdateLicense>true</canUpdateLicense>
					<emptyLineAfterHeader>true</emptyLineAfterHeader>
					<includes>
						<include>**/*.java</include>
						<!-- <include>**/*.js</include> -->
						<!-- <include>**/*.ts</include> -->
					</includes>
				</configuration>
			</plugin>
			<!-- Require Java 11 -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-enforcer-plugin</artifactId>
				<executions>
					<execution>
						<id>enforce-versions</id>
						<goals>
							<goal>enforce</goal>
						</goals>
						<configuration>
							<rules>
								<bannedPlugins>
									<!-- will only display a warning but does not fail the build. -->
									<level>WARN</level>
									<excludes>
										<exclude>org.apache.maven.plugins:maven-verifier-plugin</exclude>
									</excludes>
									<message>Please consider using the maven-invoker-plugin (http://maven.apache.org/plugins/maven-invoker-plugin/)!</message>
								</bannedPlugins>
								<requireMavenVersion>
									<version>3.0.3</version>
								</requireMavenVersion>
								<requireJavaVersion>
									<version>11</version>
								</requireJavaVersion>
								<!-- <requireOS>
                  <family>unix</family>
                </requireOS> -->
							</rules>
						</configuration>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>org.codehaus.mojo</groupId>
				<artifactId>versions-maven-plugin</artifactId>
				<configuration>
					<generateBackupPoms>false</generateBackupPoms>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<release>11</release>
                                	<forceJavacCompilerUse>true</forceJavacCompilerUse>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<argLine> --illegal-access=permit
					</argLine>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-failsafe-plugin</artifactId>
				<version>2.22.0</version>
				<configuration>
					<argLine> --illegal-access=permit
					</argLine>
				</configuration>
			</plugin>
			<!-- add build information to manifest -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<!-- parent sets version 2.5 -->
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
						</manifest>
						<manifestEntries>
							<Implementation-Version>${project.version}-b${build.number}</Implementation-Version>
						</manifestEntries>
					</archive>
				</configuration>
			</plugin>
			<!-- Build a single jar with all dependencies -->
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
				<executions>
					<execution>
						<goals>
							<goal>repackage</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<!-- Skip the deploy-jar-to-nexus step -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-deploy-plugin</artifactId>
				<!-- Spring sets the <version>2.8</version> -->
				<configuration>
					<skip>true</skip>
				</configuration>
			</plugin>
			<plugin>
				<groupId>org.jacoco</groupId>
				<artifactId>jacoco-maven-plugin</artifactId>
				<version>0.8.1</version>
				<executions>
					<execution>
						<id>default-prepare-agent</id>
						<goals>
							<goal>prepare-agent</goal>
						</goals>
					</execution>
					<execution>
						<id>default-report</id>
						<phase>prepare-package</phase>
						<goals>
							<goal>report</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
			<plugin>
				<groupId>io.fabric8</groupId>
				<artifactId>docker-maven-plugin</artifactId>
				<version>0.30.0</version>
				<configuration>
					<verbose>true</verbose>
					<!-- docker runs on the LF build minion so the default value is ok -->
					<!-- LF <dockerHost>unix:///var/run/docker.sock</dockerHost> LF -->
					<pullRegistry>${docker.pull.registry}</pullRegistry>
					<pushRegistry>${docker.push.registry}</pushRegistry>
					<!-- LF credentials are not supplied here -->
					<images>
						<image>
							<!-- Specify a tag to avoid default tag "latest" -->
							<name>ds-compositionengine:${project.version}</name>
							<build>
								<!-- This is the same FROM used in a Dockerfile -->
								<from>adoptopenjdk/openjdk11-openj9:alpine-jre</from>
								<tags>
									<!-- Add tag with build number -->
									<tag>${project.version}-b${build.number}</tag>
								</tags>
								<assembly>
									<inline>
										<files>
											<file>
												<source>target/${project.artifactId}-${project.version}.${project.packaging}</source>
												<outputDirectory />
											</file>
										</files>
									</inline>
								</assembly>
								<runCmds>
									<!-- Ensure logs dir exists and is world writable -->
									<runCmd>mkdir /maven/logs</runCmd>
									<runCmd>chmod -R 777 /maven</runCmd>
                                                                	<runCmd>apk update</runCmd>
                                                                	<runCmd>rm -rf /var/cache/apk/*</runCmd>
                                                                	<runCmd>apk --no-cache add curl</runCmd>
									<runCmd>
										<![CDATA[curl --output /maven/${protobuf.java.jar.name} http://central.maven.org/maven2/com/google/protobuf/protobuf-java/${protobuf.java.version}/${protobuf.java.jar.name}]]>
									</runCmd>
									<runCmd>
										<![CDATA[curl --output /maven/${gdmservice.jar.name} https://nexus.acumos.org/content/repositories/releases/org/acumos/design-studio/gdmservice/${gdmservice.version}/${gdmservice.jar.name}]]>
									</runCmd>
									<runCmd>
										<!-- CDATA prevents Eclipse formatter from breaking line -->
										<![CDATA[curl -OL https://github.com/google/protobuf/releases/download/v3.9.2/protoc-3.9.2-linux-x86_64.zip]]>
									</runCmd>
                                                                	<runCmd>mkdir protoc3</runCmd>
									<runCmd>
										unzip protoc-3.9.2-linux-x86_64.zip -d protoc3
									</runCmd>
									<runCmd>
										mv protoc3/bin/* /usr/local/bin/
									</runCmd>
									<runCmd>
										mv protoc3/include/* /usr/local/include/
									</runCmd>
								</runCmds>
								<!-- This is the same CMD used in a Dockerfile -->
								<cmd>
									<!-- CDATA prevents Eclipse formatter from breaking line -->
									<shell><![CDATA[cd /maven; java -Xms128m -Xmx512m -Djava.security.egd=file:/dev/./urandom -jar ${project.artifactId}-${project.version}.${project.packaging}]]></shell>
								</cmd>
							</build>
						</image>
					</images>
				</configuration>
				<!-- build Docker images in install phase, push in deploy phase -->
				<executions>
					<execution>
						<goals>
							<goal>build</goal>
							<goal>push</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>
	<!-- No distributionManagement section, jars are not deployed -->
</project>
